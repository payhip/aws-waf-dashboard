{
  "description": "Extract True-Client-IP/XFF + CF-IPCountry; set @timestamp (supports map or list headers)",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": "def getFromMap(def headersMap, String key) {\n  if (headersMap == null) return null;\n  def v = headersMap.get(key);\n  if (v == null) v = headersMap.get(key.toLowerCase());\n  if (v == null) return null;\n  if (v instanceof List) { return v.size() > 0 ? v.get(0).toString() : null; }\n  return v.toString();\n}\n\ndef getFromList(def headersList, String key) {\n  if (headersList == null || !(headersList instanceof List)) return null;\n  String k = key.toLowerCase();\n  for (h in headersList) {\n    if (h != null && h.containsKey('name') && h.containsKey('value')) {\n      def n = h.name == null ? '' : h.name.toString().toLowerCase();\n      if (n == k) return h.value == null ? null : h.value.toString();\n    }\n  }\n  return null;\n}\n\ndef headersList = null;\ndef headersMap = null;\nif (ctx.containsKey('httpRequest') && ctx.httpRequest != null) {\n  def h = ctx.httpRequest.get('headers');\n  if (h instanceof List) { headersList = h; }\n  else if (h instanceof Map) { headersMap = h; }\n}\n\nString ipCand = getFromMap(headersMap, 'True-Client-IP');\nif (ipCand == null) ipCand = getFromMap(headersMap, 'x-forwarded-for');\nif (ipCand == null) ipCand = getFromList(headersList, 'true-client-ip');\nif (ipCand == null) ipCand = getFromList(headersList, 'x-forwarded-for');\n\nif (ipCand != null) {\n  int idx = ipCand.indexOf(',');\n  if (idx > 0) ipCand = ipCand.substring(0, idx).trim();\n  if (ctx.client == null) ctx.client = new HashMap();\n  ctx.client.ip = ipCand;\n  ctx.true_client_ip = ipCand;\n}\n\nString ctry = getFromMap(headersMap, 'CF-IPCountry');\nif (ctry == null) ctry = getFromList(headersList, 'cf-ipcountry');\nif (ctry != null) {\n  if (ctx.cloudflare == null) ctx.cloudflare = new HashMap();\n  ctx.cloudflare.country = ctry;\n  ctx.real_country_code = ctry;\n}\n\nif (ctx.containsKey('timestamp') && ctx.timestamp != null) {\n  ctx['@timestamp'] = ctx.timestamp;\n}"
      }
    }
  ]
}
